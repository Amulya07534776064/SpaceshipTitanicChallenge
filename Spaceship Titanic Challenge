
# Import necessary libaries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier

import shap
import warnings
warnings.filterwarnings("ignore")

# Load Data
train = pd.read_csv('https://raw.githubusercontent.com/Revathi343664/SpaceshipTitanicChallenge/refs/heads/main/train.csv')
test = pd.read_csv('https://raw.githubusercontent.com/Revathi343664/SpaceshipTitanicChallenge/refs/heads/main/test.csv')
submission = pd.read_csv('https://raw.githubusercontent.com/Revathi343664/SpaceshipTitanicChallenge/refs/heads/main/sample_submission.csv')
test_ids = test['PassengerId']

# Missing Values Overview
print("Missing values in train:\n", train.isnull().sum())

# Initial EDA
fig, axes = plt.subplots(1, 3, figsize=(15, 4))
sns.histplot(train['Age'].dropna(), kde=True, ax=axes[0]).set(title='Age Distribution')
sns.countplot(x='VIP', data=train, ax=axes[1]).set(title='VIP Count')
sns.countplot(x='CryoSleep', data=train, ax=axes[2]).set(title='CryoSleep Count')
plt.tight_layout()
plt.show()

# Cabin Feature Engineering
for df in [train, test]:
    df[['Deck','CabinNum','Side']] = df['Cabin'].str.split('/', expand=True)
    df['CabinNum'] = pd.to_numeric(df['CabinNum'], errors='coerce')

# Missing Value Imputation
cols_cat = ['HomePlanet','CryoSleep','Destination','VIP','Deck','Side']
cols_num = ['Age','RoomService','FoodCourt','ShoppingMall','Spa','VRDeck','CabinNum']

for df in [train, test]:
    for c in cols_cat:
        df[c].fillna(df[c].mode()[0], inplace=True)
    for c in cols_num:
        df[c].fillna(df[c].median(), inplace=True)

# Feature Engineering
for df in [train, test]:
    df['TotalExpenses'] = df[['RoomService','FoodCourt','ShoppingMall','Spa','VRDeck']].sum(axis=1)
# Encoding + Scaling
le = LabelEncoder()
for c in cols_cat:
    train[c] = le.fit_transform(train[c].astype(str))
    test[c] = le.transform(test[c].astype(str))

scaler = StandardScaler()
train[cols_num + ['TotalExpenses']] = scaler.fit_transform(train[cols_num + ['TotalExpenses']])
test[cols_num + ['TotalExpenses']] = scaler.transform(test[cols_num + ['TotalExpenses']])

# Encoding + Scaling
le = LabelEncoder()
for c in cols_cat:
    train[c] = le.fit_transform(train[c].astype(str))
    test[c] = le.transform(test[c].astype(str))

scaler = StandardScaler()
train[cols_num + ['TotalExpenses']] = scaler.fit_transform(train[cols_num + ['TotalExpenses']])
test[cols_num + ['TotalExpenses']] = scaler.transform(test[cols_num + ['TotalExpenses']])

# Data Preparation for Modeling
X = train.drop(['PassengerId','Name','Cabin','Transported'], axis=1)
y = train['Transported'].astype(int)
X_test = test.drop(['PassengerId','Name','Cabin'], axis=1)

# Enhanced EDA

# Correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(train[cols_num + ['TotalExpenses'] + ['Transported']].corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

# Scatter Plots
plt.figure(figsize=(8,6))
sns.scatterplot(x='Age', y='TotalExpenses', hue='Transported', data=train)
plt.title('Age vs TotalExpenses')
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(x='Spa', y='VRDeck', hue='Transported', data=train)
plt.title('Spa vs VRDeck')
plt.show()

